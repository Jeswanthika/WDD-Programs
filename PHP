QUESTION 1:
<?php
$capital = 67;
print("Variable capital is $capital<br>");
print("Variable CaPiTaL is $CaPiTaL");
?>


QUESTION 2:
<?php
echo "    1\t2\t3\n";
for ($i = 1; $i <= 3; $i++) {
    echo $i . "\t";
    for ($j = 1; $j <= 3; $j++) {
        echo number_format($i / $j, 2) . "\t";
    }
    echo "\n";
}
?>


QUESTION 4:
<?php
$animal = "antelope";
$animal_heads = 1;
$animal_legs = 4;

echo "The $animal has $animal_heads head(s).";
echo "The $animal has $animal_legs leg(s).";
?>


QUESTION 6:
<?php
session_start();

// Check if form is submitted
if ($_SERVER['REQUEST_METHOD'] == 'POST') {
    $_SESSION['username'] = $_POST['username'];
    header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}

// If session is set, show welcome message
$username = isset($_SESSION['username']) ? $_SESSION['username'] : null;
?>

<!DOCTYPE html>
<html>
<head>
    <title>Session Example</title>
</head>
<body>

<?php if ($username): ?>
    <p>Welcome, <?php echo htmlspecialchars($username); ?>!</p>
    <p><a href="?logout=true">Logout</a></p>
<?php else: ?>
    <form method="post">
        <label>Enter your name:</label>
        <input type="text" name="username" required>
        <button type="submit">Submit</button>
    </form>
<?php endif; ?>

<?php
// Handle logout
if (isset($_GET['logout'])) {
    session_destroy();
    header("Location: " . $_SERVER['PHP_SELF']);
    exit();
}
?>

</body>
</html>


QUESTION 13:
<?php
$sub = substr(12345, 2, 2);
echo "sub is $sub";
?>

QUESTION 18:
<?php
$name = "Dhanuja";
$age = 21;
$city = NULL;
if (isset($name)) {
    echo " Name is set and not NULL.<br>";
} else {
    echo " Name is not set.<br>";
}
if (isset($age)) {
    echo " Age is set and not NULL.<br>";
} else {
    echo " Age is not set.<br>";
}
if (isset($city)) {
    echo " City is set and not NULL.<br>";
} else {
    echo " City is not set.<br>";
}
if (isset($name, $age)) {
    echo " Both name and age are set.<br>";
}
?>


QUESTION 22:
<?php
$text = "Computer science is the study of computers and computational systems. 
Computer science deals with software and software systems; this includes their theory, design, development, and application. 
A degree in computer science can lead to careers in software engineering, data science, artificial intelligence, and cybersecurity. 
Computer science is a rapidly growing field in today's digital age.";
$word = "computer science";
$count = substr_count(strtolower($text), strtolower($word));
echo "<h3>Paragraph:</h3><p>$text</p>";
echo "<h3>Result:</h3>";
echo "The phrase '$word' occurs $count times in the given paragraph.";
?>


QUESTION 24:
<?php
$text = "  Computer Science is Amazing!  ";
echo "<h2>Original String:</h2>";
echo $text . "<br><br>";
 strlen() - Get string length
echo "Length: " . strlen($text) . "<br>";
 trim(), ltrim(), rtrim() - Remove spaces
echo "Trimmed: '" . trim($text) . "'<br>";
echo "Left Trim: '" . ltrim($text) . "'<br>";
echo "Right Trim: '" . rtrim($text) . "'<br>";
strtolower(), strtoupper(), ucfirst(), ucwords()
echo "Lowercase: " . strtolower($text) . "<br>";
echo "Uppercase: " . strtoupper($text) . "<br>";
echo "First letter capitalized: " . ucfirst(trim($text)) . "<br>";
echo "Capitalize each word: " . ucwords(strtolower(trim($text))) . "<br>";
 strrev() - Reverse string
echo "Reversed: " . strrev($text) . "<br>";
substr() - Extract substring
echo "Substring (0 to 8): " . substr($text, 0, 8) . "<br>";
. strpos(), strrpos() - Find position
echo "First position of 'Science': " . strpos($text, "Science") . "<br>";
echo "Last position of 'is': " . strrpos($text, "is") . "<br>";
str_replace() - Replace words
echo "Replace 'Amazing' with 'Interesting': " . str_replace("Amazing", "Interesting", $text) . "<br>";
str_repeat() - Repeat string
echo "Repeat 'Hi!' 3 times: " . str_repeat("Hi! ", 3) . "<br>";
explode() - Split string into array
$words = explode(" ", trim($text));
echo "Exploded words: ";
print_r($words);
echo "<br>";
implode() - Join array into string
echo "Imploded words: " . implode("-", $words) . "<br>";
strcmp(), strcasecmp() - Compare strings
echo "Compare 'Hello' and 'hello' (case-sensitive): " . strcmp("Hello", "hello") . "<br>";
echo "Compare 'Hello' and 'hello' (case-insensitive): " . strcasecmp("Hello", "hello") . "<br>";
str_shuffle() - Shuffle characters
echo "Shuffled string: " . str_shuffle(trim($text)) . "<br>";
wordwrap() - Wrap text after 10 characters
echo nl2br("Word wrapped:\n" . wordwrap($text, 10, "\n", true)) . "<br>";
htmlspecialchars() - Convert HTML chars
$html = "<b>Bold Text</b>";
echo "HTML special chars: " . htmlspecialchars($html) . "<br>";
number_format() - Format number
$num = 1234567.891;
echo "Formatted number: " . number_format($num, 2) . "<br>";
?>


QUESTION 25:
<?php
$text = "The Thing will come to you soon";
$result = preg_replace('/the/i', 'Best', $text, 1);
echo "Original: $text <br>";
echo "Modified: $result";
?>


QUESTION 27:
<?php
$a = 15;
$b = 4;
echo "a = $a, b = $b <br><br>";
echo "Addition (+): " . ($a + $b) . "<br>";
echo "Subtraction (-): " . ($a - $b) . "<br>";
echo "Multiplication (*): " . ($a * $b) . "<br>";
echo "Division (/): " . ($a / $b) . "<br>";
echo "Modulus (%): " . ($a % $b) . "<br>";
echo "Exponentiation (**): " . ($a ** $b) . "<br>";
?>


QUESTION 28:
<?php
$a = 10;
$b = "10";
$c = 20;
function checkEquality($x, $y, $strict = false) {
    if ($strict) {
        echo ($x === $y) ? "Equal<br>" : "Not Equal<br>";
    } else {
        echo ($x == $y) ? "Equal<br>" : "Not Equal<br>";
    }
}
echo "Check with == (value comparison):<br>";
checkEquality($a, $b); // value comparison
checkEquality($a, $c);
echo "<br>Check with === (value and type comparison):<br>";
checkEquality($a, $b, true); // strict comparison
checkEquality($a, $c, true);
echo "<br>Are all three equal (value check)?<br>";
echo ($a == $b && $b == $c) ? "Equal<br>" : "Not Equal<br>";
echo "Are all three equal (value & type)?<br>";
echo ($a === $b && $b === $c) ? "Equal<br>" : "Not Equal<br>";
?>


QUESTION 29:
<?php
echo "<h2>PHP Function Demonstrations</h2>";
echo "<b>1. rand():</b><br>";
echo "Random number (no range): " . rand() . "<br>";
echo "Random number (1 to 10): " . rand(1, 10) . "<br><br>";
echo "<b>2. abs():</b><br>";
echo "Absolute value of -15: " . abs(-15) . "<br>";
echo "Absolute value of 20: " . abs(20) . "<br><br>";
echo "<b>3. str_replace():</b><br>";
$text = "I love PHP programming";
echo "Original: $text<br>";
echo "After replacement: " . str_replace("PHP", "Java", $text) . "<br><br>";
echo "<b>4. pi():</b><br>";
echo "Value of pi: " . pi() . "<br>";
echo "Circumference of a circle (radius 5): " . (2 * pi() * 5) . "<br><br>";
echo "<b>5. ceil():</b><br>";
echo "Ceil of 4.2: " . ceil(4.2) . "<br>";
echo "Ceil of -4.2: " . ceil(-4.2) . "<br>";
?>


QUESTION 30:
<?php
function generatePassword($length = 12) {
    $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+<>?';  
    $password = '';
    $charLength = strlen($chars);
    for ($i = 0; $i < $length; $i++) {
        $password .= $chars[rand(0, $charLength - 1)];
    }
    return $password;
}
echo "<h3>Random Password Generator</h3>";
echo "Generated Password: <b>" . generatePassword(12) . "</b>";
?>

QUESTION 31:
 <?php
$fruits = array("Apple", "Banana", "Cherry", "Mango");
array_shift($fruits); 
print_r($fruits);
?>

QUESTION 33:
<?php
$matrix = array(
    array(1, 2, 3),  
    array(4, 5, 6),   
    array(7, 8, 9)    
);
$value = $matrix[1][2];
echo "The value in the second row and third column is: $value";
?>

QUESTION 34:
<?php
$text = "PHP is great. I love PHP because PHP is powerful.";
$pattern = "/\bPHP\b/"; 
$replacement = "Java";
$result = preg_replace($pattern, $replacement, $text);
echo $result;
?>

QUESTION 35:
<?php
$strings = array(
    "Hello, welcome to PHP programming.",
    "PHP is great for web development.",
    "Learning PHP is fun!"
);
$search = "PHP";
foreach ($strings as $str) {
    if (strpos($str, $search) !== false) { 
        echo "The string '$str' contains '$search'.<br>";
    } else {
        echo "The string '$str' does NOT contain '$search'.<br>";
    }
}
?>

QUESTION 36:
<?php
$fruits = array("Apple", "Banana", "Cherry", "Mango", "Orange");
echo "The third fruit is: " . $fruits[2];
?>

QUESTION 38:
<?php
$fruits = array("Apple", "Banana", "Cherry", "Mango");
$total = count($fruits);
$i = 0;
while ($i < $total) {
    echo "Fruit $i: " . $fruits[$i] . "<br>";
    $i++;
}
?>

QUESTION 40:
<?php
$text = "Hello@123! Welcome_to PHP#2025.";
$chars = str_split($text);
$allowed = array_merge(range('a', 'z'), range('A', 'Z'), range('0', '9'), array(' '));
$result = array_filter($chars, function($char) use ($allowed) {
    return in_array($char, $allowed);
});
$cleanString = implode('', $result);
echo "Original: $text<br>";
echo "Cleaned: $cleanString";
?>

QUESTION 41:
<?php
$text = "Contact us at support@example.com or sales@myshop.org. You can also reach admin123@domain.net.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-z]{2,}/";
preg_match_all($pattern, $text, $matches);
$emails = $matches[0];
echo "Found Email Addresses:<br>";
foreach ($emails as $email) {
    echo $email . "<br>";
}
?>

QUESTION 42:
<?php
$marks1 = array(360,310,310,330,313,375,456,111,256);
$marks2 = array(350,340,356,330,321);
$marks3 = array(630,340,570,635,434,255,298);
$allMarks = array_merge($marks1, $marks2, $marks3);
$maxMark = max($allMarks);
$minMark = min($allMarks);
echo "Maximum Marks: " . $maxMark . "<br>";
echo "Minimum Marks: " . $minMark;
?>

QUESTION 43:
<?php
$passwords = array(
    "Abc123!@",  
    "password",
    "PASS123@",  
    "Passw1@",
    "ValidPass123#"
);

$pattern = "/^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9]).{8,}$/";

foreach ($passwords as $pwd) {
    if (preg_match($pattern, $pwd)) {
        echo " '$pwd' is a valid password.<br>";
    } else {
        echo " '$pwd' is NOT valid.<br>";
    }
}
?>

QUESTION 45:
<?php
function arrayDiffMulti($array1, $array2) {
    $result = array();
    foreach ($array1 as $key => $value) {
        if (is_array($value)) {   
            if (!isset($array2[$key]) || !is_array($array2[$key])) {
                $result[$key] = $value;
            } else {
                $diff = arrayDiffMulti($value, $array2[$key]);
                if (!empty($diff)) {
                    $result[$key] = $diff;
                }
            }
        } else {
            // Compare scalar values
            if (!in_array($value, $array2)) {
                $result[$key] = $value;
            }
        }
    }
    return $result;
}
$array1 = array(
    "fruits" => array("apple", "banana", "mango"),
    "numbers" => array(1, 2, 3, 4),
    "colors" => array("red", "green")
);
$array2 = array(
    "fruits" => array("apple", "banana"),
    "numbers" => array(2, 3, 4, 5),
    "colors" => array("green", "blue")
);
$difference = arrayDiffMulti($array1, $array2);
echo "<pre>";
print_r($difference);
echo "</pre>";
?>

QUESTION 46:
<?php
$fruits = array("apple", "banana", "mango", "orange", "grape");
$searchValue = "mango";
$index = array_search($searchValue, $fruits);
if ($index !== false) {
    echo "The index of '$searchValue' is: " . $index;
} else {
    echo "'$searchValue' was not found in the array.";
}
?>

QUESTION 47:
<?php
$x = array(1, 2, 3, 4, 5);
unset($x[2]);
$x = array_values($x);
foreach ($x as $value) {
    echo $value . " ";
}
?>

QUESTION 48:
<?php
echo "<h2> Record Number Handling in PHP</h2>";
$students = array("Anand", "Priya", "Karthik", "Divya", "Lakshmi");
echo "<h3>Example 1: Record Numbers with Array</h3>";
$recordNumber = 1;
foreach ($students as $name) {
    echo "Record #$recordNumber: $name<br>";
    $recordNumber++;
}
$studentMarks = array(
    array("name" => "Anand", "marks" => 85),
    array("name" => "Priya", "marks" => 92),
    array("name" => "Karthik", "marks" => 78),
    array("name" => "Divya", "marks" => 88)
);
echo "<h3>Example 2: Record Numbers with Multidimensional Array (Simulated DB)</h3>";
$recordNumber = 1;
foreach ($studentMarks as $student) {
    echo "Record #$recordNumber: " . $student['name'] . " - Marks: " . $student['marks'] . "<br>";
    $recordNumber++;
}
$items = array("Pen", "Pencil", "Eraser");
echo "<h3>Example 3: Using array_keys() to Get Record Numbers</h3>";
foreach (array_keys($items) as $index) {
    echo "Record #" . ($index + 1) . ": " . $items[$index] . "<br>";
}
?>

QUESTION 49:
<?php
echo "<h2> Sports Team Player Performance Evaluation</h2>";
$players = array(
    array("name" => "Dhanuja", "matches" => 15, "runs" => 820, "wickets" => 5),
    array("name" => "Lakshmi", "matches" => 18, "runs" => 1040, "wickets" => 8),
    array("name" => "Janani",  "matches" => 20, "runs" => 970,  "wickets" => 15),
    array("name" => "Amirtha", "matches" => 12, "runs" => 600,  "wickets" => 2),
    array("name" => "Gopika",  "matches" => 22, "runs" => 1200, "wickets" => 18),
    array("name" => "Jes",     "matches" => 16, "runs" => 750,  "wickets" => 6)
);
function calculatePerformanceIndex($runs, $matches, $wickets) {
    return ($runs / $matches) + ($wickets * 5);
}
foreach ($players as &$player) {
    $player['PI'] = round(calculatePerformanceIndex($player['runs'], $player['matches'], $player['wickets']), 2);
}
unset($player); 
$totalRuns = array_sum(array_column($players, 'runs'));
$totalWickets = array_sum(array_column($players, 'wickets'));
$totalMatches = array_sum(array_column($players, 'matches'));
$averageRuns = round($totalRuns / count($players), 2);
$averageWickets = round($totalWickets / count($players), 2);
usort($players, function($a, $b) {
    return $b['PI'] <=> $a['PI']; // Descending order
});
echo "<table border='1' cellpadding='5'>";
echo "<tr><th>Rank</th><th>Name</th><th>Matches</th><th>Runs</th><th>Wickets</th><th>Performance Index</th></tr>";
$rank = 1;
foreach ($players as $player) {
    echo "<tr>
            <td>{$rank}</td>
            <td>{$player['name']}</td>
            <td>{$player['matches']}</td>
            <td>{$player['runs']}</td>
            <td>{$player['wickets']}</td>
            <td>{$player['PI']}</td>
          </tr>";
    $rank++;
}
echo "</table>";
echo "<h3> Team Statistics</h3>";
echo "Average Runs per Player: $averageRuns<br>";
echo "Average Wickets per Player: $averageWickets<br>";
echo "Total Matches Played by Team: $totalMatches<br>";
?>

QUESTION 50:
<?php
$names = array("Dhanuja", "Lakshmi", "Janani", "Amirtha", "Gopika", "Jes");
echo "<h2> Original Array</h2>";
print_r($names);
$lowercaseArray = array_map('strtolower', $names);
$uppercaseArray = array_map('strtoupper', $names);
echo "<h2> Lowercase Array</h2>";
print_r($lowercaseArray);
echo "<h2> Uppercase Array</h2>";
print_r($uppercaseArray);
?>

QUESTION 51:
<?php
$fruits = array("Apple", "Banana", "Cherry");
echo "<h3>Original Array:</h3>";
print_r($fruits);
$removed = array_shift($fruits);
echo "<br><strong>Removed (array_shift):</strong> $removed<br>";
print_r($fruits);
array_unshift($fruits, "Mango", "Pineapple");
echo "<br><strong>After array_unshift:</strong><br>";
print_r($fruits);
?>

QUESTION 52:
<?php
echo "<h2> Stack (LIFO)</h2>";
$stack = array();
array_push($stack, "Apple");
array_push($stack, "Banana");
array_push($stack, "Cherry");
echo "Stack after pushes: ";
print_r($stack);
$popped = array_pop($stack);
echo "<br>Element popped: $popped<br>";
echo "Stack after pop: ";
print_r($stack);
echo "<hr>";
echo "<h2> Queue (FIFO)</h2>";
$queue = array();
array_push($queue, "Red");
array_push($queue, "Green");
array_push($queue, "Blue");
echo "Queue after enqueues: ";
print_r($queue);
$dequeued = array_shift($queue);
echo "<br>Element dequeued: $dequeued<br>";
echo "Queue after dequeue: ";
print_r($queue);
?>

QUESTION 53:
<?php
$numbers = array(10, 20, 30, 40, 50);
echo "<h2>Original Array:</h2>";
print_r($numbers);
echo "<hr><h3>Using array_pop() (removes from END)</h3>";
$popValue = array_pop($numbers);
echo "Value removed using array_pop(): $popValue<br>";
echo "Array after array_pop(): ";
print_r($numbers);
echo "<hr><h3>Reset Array for array_shift() Example</h3>";
$numbers = array(10, 20, 30, 40, 50);
echo "Original Array Again: ";
print_r($numbers);
echo "<hr><h3>Using array_shift() (removes from BEGINNING)</h3>";
$shiftValue = array_shift($numbers);
echo "Value removed using array_shift(): $shiftValue<br>";
echo "Array after array_shift(): ";
print_r($numbers);
?>

QUESTION 54:
<?php
$ticketQueue = array();
function bookTicket(&$queue, $name) {
    array_push($queue, $name); 
    echo "$name has been added to the booking queue.<br>";
}
function serveCustomer(&$queue) {
    if (!empty($queue)) {
        $customer = array_shift($queue); 
        echo "$customer's ticket has been booked!<br>";
    } else {
        echo "No customers in the queue.<br>";
    }
}
bookTicket($ticketQueue, "Dhanuja");
bookTicket($ticketQueue, "Lakshmi");
bookTicket($ticketQueue, "Jannai");
bookTicket($ticketQueue, "Amirtha");
bookTicket($ticketQueue, "Gopika");
bookTicket($ticketQueue, "Jes");
echo "<hr><b>Current Queue:</b><br>";
print_r($ticketQueue);
echo "<hr><b>Serving Customers:</b><br>";
serveCustomer($ticketQueue);
serveCustomer($ticketQueue);
echo "<hr><b>Queue after serving two customers:</b><br>";
print_r($ticketQueue);
?>

QUESTION 56:
<?php
function reverseString($input) {
    $stack = array();
    for ($i = 0; $i < strlen($input); $i++) {
        array_push($stack, $input[$i]);
    }
    $reversed = '';
    while (!empty($stack)) {
        $reversed .= array_pop($stack);
    }
    return $reversed;
}
$original = "Hello World";
echo "Original String: " . $original . "<br>";
echo "Reversed String: " . reverseString($original);
?>

QUESTION 57:
<?php
echo "<h2>Regular Expression Examples in PHP</h2>";
$email = "test@example.com";
if (preg_match("/^[\w.-]+@[\w.-]+\.[a-z]{2,}$/i", $email)) {
    echo " Valid Email<br>";
} else {
    echo " Invalid Email<br>";
}
$text = "There are 3 cats, 14 dogs, and 27 birds.";
preg_match_all("/\d+/", $text, $matches);
echo "Numbers Found: ";
print_r($matches[0]);
echo "<br>";
$str = "Hello    World   PHP";
$result = preg_replace("/\s+/", " ", $str);
echo "After Space Cleanup: $result<br>";
$str2 = "apple,banana;cherry orange";
$parts = preg_split("/[^a-z]+/i", $str2);
echo "Split Words: ";
print_r($parts);
echo "<br>";
$sentence = "Dhanuja and Lakshmi went to Chennai with Gopika.";
preg_match_all("/\b[A-Z][a-z]*\b/", $sentence, $names);
echo "Names Found: ";
print_r($names[0]);
?>

QUESTION 58:
<?php
echo "<h2>Extract Email Addresses using Regular Expressions</h2>";
$text = "Contact us at support@example.com, sales@myshop.in or admin@test.org for more info.";
$pattern = "/[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}/";
if (preg_match_all($pattern, $text, $matches)) {
    echo "<strong>Extracted Email Addresses:</strong><br>";
    foreach ($matches[0] as $email) {
        echo $email . "<br>";
    }
} else {
    echo "No email addresses found.";
}
?>

QUESTION 59:
<?php
function calculateAverage($numbers) {
    if (count($numbers) === 0) {
        return 0; 
    }
    $sum = array_sum($numbers); 
    $average = $sum / count($numbers); 
    return $average;
}
$nums = array(10, 20, 30, 40, 50);
$avg = calculateAverage($nums);
echo "Numbers: " . implode(", ", $nums) . "<br>";
echo "Average Value: " . $avg;
?>

QUESTION 60:
<?php
function searchValueInAssocArray($array, $value) {
    $keys = array_keys($array, $value, true); 
    return $keys;
}
$students = array(
    "dhanuja" => 95,
    "lakshmi" => 82,
    "janani"  => 68,
    "amirtha" => 74,
    "gopika"  => 55,
    "jes"     => 82
);
$searchValue = 82;
$resultKeys = searchValueInAssocArray($students, $searchValue);
if (!empty($resultKeys)) {
    echo "Value $searchValue found in: " . implode(", ", $resultKeys);
} else {
    echo "Value $searchValue not found in the array.";
}
?>

QUESTION 61:
<?php
echo "<h1>Delete an Element from an Array in PHP</h1>";
$students = array("dhanuja", "lakshmi", "janani", "amirtha", "gopika", "jes");
echo "<h3>Original Array:</h3>";
print_r($students);
$elementToDelete = "janani";
$index = array_search($elementToDelete, $students);
if ($index !== false) {
    unset($students[$index]);
}
$students = array_values($students);
echo "<h3>Array After Deleting '$elementToDelete':</h3>";
print_r($students);
?>

QUESTION 62:
<?php
echo "<h1>Rounding Values in PHP</h1>";
$values = array(1.65, 1.65, -1.54);
echo "<h3>Original Values:</h3>";
print_r($values);
$roundedValues = array_map(function($val) {
    return round($val, 1);
}, $values);
echo "<h3>Rounded Values (1 decimal place):</h3>";
print_r($roundedValues);
?>

QUESTION 63:
<?php
echo "<h1>Sum of Even Numbers in an Array</h1>";
function sumEvenNumbers($numbers) {
    $sum = 0;
    foreach ($numbers as $num) {
        if ($num % 2 == 0) {  
            $sum += $num;
        }
    }
    return $sum;
}
$array = array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);
echo "<h3>Array:</h3>";
print_r($array);
$sumEven = sumEvenNumbers($array);
echo "<h3>Sum of Even Numbers:</h3>";
echo $sumEven;
?>

QUESTION 65:
<?php
$mainString = "The quick brown fox jumps over the lazy dog";
$searchString = "fox";
if (strpos($mainString, $searchString) !== false) {
    echo "The string '<b>$searchString</b>' was found in the main string.";
} else {
    echo "The string '<b>$searchString</b>' was NOT found in the main string.";
}
?>

QUESTION 67:
<?php
$sentence = "PHP is great. PHP is easy to learn. Learning PHP is fun!";
$sentence = strtolower($sentence);
preg_match_all("/\w+/", $sentence, $words);
$wordsArray = $words[0];
$wordCounts = array_count_values($wordsArray);
echo "<h2>Word Occurrences</h2>";
echo "<table border='1' cellpadding='5'>";
echo "<tr><th>Word</th><th>Count</th></tr>";
foreach ($wordCounts as $word => $count) {
    echo "<tr><td>" . htmlspecialchars($word) . "</td><td>" . $count . "</td></tr>";
}
echo "</table>";
?>

QUESTION 68:
<?php
function divide($numerator, $denominator) {
    if ($denominator == 0) {
        throw new Exception("Error: Division by zero is not allowed.");
    }
    return $numerator / $denominator;
}
$numerator = 10;
$denominator = 0;

try {
    $result = divide($numerator, $denominator);
    echo "Result: " . $result;
} catch (Exception $e) {
    echo $e->getMessage();
}
?>

QUESTION 69:
<?php
$Color = array('A' => 'Blue', 'B' => 'Green', 'c' => 'Red');
function arrayToLower($arr) {
    return array_map('strtolower', $arr);
}
function arrayToUpper($arr) {
    return array_map('strtoupper', $arr);
}
$lowerCaseArray = arrayToLower($Color);
echo "Values are in lower case.<br>";
print_r($lowerCaseArray);
echo "<br><br>";
$upperCaseArray = arrayToUpper($Color);
echo "Values are in upper case.<br>";
print_r($upperCaseArray);
?>

QUESTION 72:
<?php
session_start();
$_SESSION["username"] = "Dhanu";
$_SESSION["email"] = "dhanu@gmail.com";
echo "<h3>Session variables are set.</h3>";
echo "Username: " . $_SESSION["username"] . "<br>";
echo "Email: " . $_SESSION["email"] . "<br>";
session_unset();
echo "<h3>After session_unset():</h3>";
var_dump($_SESSION); 
session_destroy();
echo "<h3>Session destroyed.</h3>";
?>

QUESTION 73:
<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $fileName = $_FILES["myfile"]["name"];
    $fileTmp  = $_FILES["myfile"]["tmp_name"];
    $fileExt  = strtolower(pathinfo($fileName, PATHINFO_EXTENSION));
    $allowedExt = ["jpg", "jpeg", "png"];
    if (!in_array($fileExt, $allowedExt)) {
        echo "<h3 style='color:red;'>Error: Only JPG and PNG files are allowed!</h3>";
    } else {
        if (move_uploaded_file($fileTmp, "uploads/" . $fileName)) {
            echo "<h3 style='color:green;'>File uploaded successfully!</h3>";
        } else {
            echo "<h3 style='color:red;'>Error uploading file.</h3>";
        }
    }
}
?>
<form method="post" enctype="multipart/form-data">
    <label>Select image (JPG or PNG only):</label><br><br>
    <input type="file" name="myfile" required>
    <br><br>
    <input type="submit" value="Upload">
</form>

QUESTION 74:
<?php
$file = fopen("sample.txt", "w"); 
if ($file) {
    fwrite($file, "Hello, this is the first line.\n");
    fwrite($file, "This is the second line in the file.\n");
    fclose($file); 
    echo "<b>Data written to 'sample.txt' successfully.</b><br><br>";
} else {
    echo "Unable to open file for writing.<br>";
    exit;
}
$file = fopen("sample.txt", "r"); // Open file in read mode
if ($file) {
    echo "<b>Reading file line-by-line with fgets():</b><br>";
    while (!feof($file)) { // Loop until end of file
        echo fgets($file) . "<br>";
    }
    fclose($file);
} else {
    echo "Unable to open file for reading.<br>";
}
echo "<br><b>Reading entire file with file_get_contents():</b><br>";
$content = file_get_contents("sample.txt");
echo nl2br($content); // nl2br() to keep line breaks in HTML
?>

QUESTION 75:
<?php
function appendLineToFile($filename, $newLine) {
    $file = fopen($filename, "a");
    if ($file) {
        fwrite($file, $newLine . "\n"); 
        fclose($file);
        echo "Line appended successfully to '$filename'.<br>";
    } else {
        echo "Unable to open file: $filename<br>";
    }
}
$filename = "mydata.txt";
$newContent = "This is a newly added line.";
appendLineToFile($filename, $newContent);
echo "<b>Current contents of '$filename':</b><br>";
echo nl2br(file_get_contents($filename));
?>

QUESTION 78:
<?php
if (!isset($_COOKIE["username"])) {
    setcookie("username", "Dhanuja", time() + 3600, "/"); 
    echo "Cookie 'username' is set with value 'lakshmisree'. Please refresh the page.<br>";
} else {
    echo "Cookie Value: " . $_COOKIE["username"] . "<br>";
    setcookie("username", "", time() - 3600, "/");
    echo "Cookie 'username' has been deleted.<br>";
}
?>

QUESTION 79:
<?php
$file1 = "test.txt";
$file2 = "test2.txt";
$outputFile = "output.txt";
$content1 = file_get_contents($file1);
$content2 = file_get_contents($file2);
$fp = fopen($outputFile, "a");
fwrite($fp, $content1 . PHP_EOL); 
fwrite($fp, $content2 . PHP_EOL); 
fclose($fp);
echo "Files appended successfully to $outputFile";
?>

QUESTION 80:
<?php
setcookie("TestCookie", "HelloCookie", time() + 3600, "/"); 
if (isset($_COOKIE["TestCookie"])) {
    echo "TestCookie Value: " . $_COOKIE["TestCookie"];
} else {
    echo "TestCookie has been set. Please refresh the page to see its value.";
}
?>

QUESTION 82:
<?php
setcookie("basic_cookie", "HelloCookie");
setcookie("hour_cookie", "Expires in 1 hour", time() + 3600);
setcookie("path_cookie", "Site-wide cookie", time() + 3600, "/");
setcookie("domain_cookie", "Domain specific cookie", time() + 3600, "/", "localhost");
setcookie("secure_cookie", "SecureData", time() + 3600, "/", "", true, true);
?>
<!DOCTYPE html>
<html>
<head>
    <title>setcookie() Examples</title>
</head>
<body>
<h2>PHP setcookie() Examples</h2>
<p>Cookies have been set. Please refresh this page to see their values.</p>
<?php
if (!empty($_COOKIE)) {
    echo "<h3>Current Cookies:</h3>";
    foreach ($_COOKIE as $name => $value) {
        echo htmlspecialchars($name) . " = " . htmlspecialchars($value) . "<br>";
    }
} else {
    echo "<p>No cookies found yet. Reload the page.</p>";
}
?>
</body>
</html>

QUESTION 83:
<?php
$validationResult = "";
$domainName = "";
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $email = trim($_POST["email"]);
    if (filter_var($email, FILTER_VALIDATE_EMAIL)) {
        $validationResult = "Valid email address ";
        $parts = explode("@", $email);
        $domainName = $parts[1];
    } else {
        $validationResult = "Invalid email address ";
    }
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>Email Validation</title>
</head>
<body>
<h2>Email Validation & Domain Extraction</h2>
<form method="post">
    <label>Enter Email Address:</label><br>
    <input type="email" name="email" required>
    <input type="submit" value="Validate">
</form>

<?php
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    echo "<h3>Result:</h3>";
    echo "<p>$validationResult</p>";
    if (!empty($domainName)) {
        echo "<p>Domain Name: <b>$domainName</b></p>";
    }
}
?>
</body>
</html>

QUESTION 84:
<?php
session_start(); 
if (isset($_GET['action']) && $_GET['action'] == 'set') {
    $_SESSION['username'] = "Dhanuja";
    $_SESSION['email'] = "dhanu@example.com";
}
if (isset($_GET['action']) && $_GET['action'] == 'remove_username') {
    unset($_SESSION['username']);
}
if (isset($_GET['action']) && $_GET['action'] == 'destroy') {
    session_unset();
    session_destroy();
}
?>
<!DOCTYPE html>
<html>
<head>
    <title>PHP Session Example</title>
</head>
<body>
<h2>Session Handling Example</h2>
<a href="?action=set">Set Session Values</a> | 
<a href="?action=remove_username">Remove 'username'</a> | 
<a href="?action=destroy">Destroy All Sessions</a>
<hr>
<h3>Current Session Data:</h3>
<pre>
<?php
if (!empty($_SESSION)) {
    print_r($_SESSION);
} else {
    echo "No session data found.";
}
?>
</pre>
</body>
</html>

QUESTION 86:
<?php
echo "<h3>PHP File Functions </h3>";
$file = fopen("test.txt", "r") or die("Unable to open test.txt!");
$size = filesize("test.txt");
echo "File size: $size bytes<br>";
echo "<b>Using fread():</b><br>";
echo nl2br(fread($file, $size)) . "<br>";
fclose($file);
echo "<b>Using file_get_contents():</b><br>";
echo nl2br(file_get_contents("test.txt")) . "<br>";
$file = fopen("test.txt", "r");
echo "<b>Reading line-by-line:</b><br>";
while (!feof($file)) {
    echo nl2br(fgets($file));
}
fclose($file);
file_put_contents("test.txt", "\nThis line is appended by PHP.", FILE_APPEND);
$newFile = fopen("newfile.txt", "w");
fwrite($newFile, "This is a new file created with fwrite().\n");
fclose($newFile);
copy("test.txt", "copy.txt");
rename("copy.txt", "renamed.txt");
unlink("renamed.txt");
unlink("newfile.txt");
echo "<br><b>All file operations completed successfully!</b>";
?>

QUESTION 88:
<?php
$birthMonth = 05;
$birthDay = 29;
$today = new DateTime();
$thisYear = (int)$today->format('Y');
$birthdayThisYear = DateTime::createFromFormat('Y-n-j', "$thisYear-$birthMonth-$birthDay");
if ($birthdayThisYear < $today) {
    $birthdayThisYear->modify('+1 year');
}
$interval = $today->diff($birthdayThisYear);
$daysUntil = $interval->days;
if ($daysUntil === 0) {
    echo "Happy Birthday! ";
} elseif ($daysUntil === 1) {
    echo "It's tomorrow! Just 1 day to go.";
} else {
    echo "Your birthday is in $daysUntil days.";
}
?>

QUESTION 89:
<?php
$filename = "test.txt";
if (file_exists($filename)) {
    $file = fopen($filename, "r");
    $content = fread($file, filesize($filename));
    echo $content;
    fclose($file);
} else {
    echo "File does not exist.";
}
?>

QUESTION 90:
<?php
$filename = "test.txt";
if (file_exists($filename)) {
    $file = fopen($filename, "r") or die("Unable to open file!");
    while (!feof($file)) {
        echo fgets($file) . "<br>"; // Read line by line
    }
    fclose($file);
} else {
    echo "File not found!";
}
?>
